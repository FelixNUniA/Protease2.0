breed [swarm-agents swarm-agent]
breed [midpoints midpoint]



globals [
  curr-midpoint; the index of the currently selected midpoint
  layer-midpoints-count
  layers-absolute-count
  layers-radius
  layers-neighbourhood
  layers-swarm-algortihm
  layers-move-weight
  layer-selected? ; select button pressed
]


swarm-agents-own [
  layer ;index of the layer this agent belongs to
  swarm ;index of sthe swarm this agent belongs to
  swarm-radius
  swarm-algortihm
  swarm-neighbourhood
  swarm-move-weight
  mp-index;
  orientation
]

midpoints-own [
  index ;index of the midpoint (for swarm behaviour)
  orientation
]

;Setup-----------------------------------------------------------------------


to startup
  ; Auto-setup Ring-of-Rings default
  set layer-midpoints-count [8 8 0 0 0]
  set layers-neighbourhood [20 5 0 0 0]
  set layers-radius [20 10 0 0 0]
  set layers-swarm-algortihm ["Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0 0.02 0 0 0]
  setup
end

to setup
  if layer-midpoints-count = 0 [
    if-else user-yes-or-no? (word "You need to first set up the layers. Du you want to use the default Ring-of-Rings setup ?")[
    scenario-1
    ] [
      stop
    ]
  ]


  clear
  setup-agents
  if count swarm-agents = 0 [stop]
  setup-world
  setup-midpoints
  select-midpoint
  setup-hierarchic
  if (set-mode = "multiple-set") [
    setup-multiple-set
  ]
  reset-ticks
end

to clear
   clear-ticks
   clear-turtles
   clear-patches
   clear-drawing
   clear-all-plots
   clear-output
end

to setup-world
 ask patches with [pzcor = min-pzcor][
    set pcolor white
  ]
  ask patches with [pzcor = min-pzcor] [
    if (pycor = min-pycor) and (pxcor < -20) [set pcolor red]
    if (pxcor = min-pxcor) and (pycor < -20 ) [set pcolor green]
  ]
  ask patches with [pycor = min-pycor and pxcor = min-pxcor ] [
    if (pzcor < -20) [set pcolor blue]
  ]
end

to setup-agents
  set layers-absolute-count [0 0 0 0 0]
  let agent-count item 0 layer-midpoints-count
  set layers-absolute-count replace-item 0 layers-absolute-count agent-count
  let i 1
  while [i < length layer-midpoints-count] [
    let c ((item i layer-midpoints-count) * (item (i - 1) layers-absolute-count))
    set layers-absolute-count replace-item i layers-absolute-count c
    set agent-count agent-count + c
    set i (i + 1)
  ]

  show agent-count
  if agent-count > agent-max-count [
    if not user-yes-or-no? (word "You are about to spawn " agent-count " agents. Are you sure ?")[
      stop
    ]
  ]

  create-swarm-agents agent-count
  ask swarm-agents [
    initialize-agent
  ]
end





to setup-midpoints

  create-midpoints 1
  ask midpoints [
    initialize-midpoints
  ]
  let i 1

end




to setup-multiple-set
  let i 0
  let s 1
  while [i < layer-count] [
    while [ count swarm-agents with [layer = i and swarm = 0] > 0]
    [
      ask n-of (item i layer-midpoints-count) swarm-agents with [ layer = i and swarm = 0] [
        set swarm s
      ]
      set s s + 1
    ]

    set i i + 1

  ]

  set i 0
  let mp 2
  while [i < layer-count - 1] [
    while [count swarm-agents with [layer = i and mp-index = 0] > 0] [
      ask one-of swarm-agents with [layer = i and mp-index = 0] [
        set mp-index mp
      ]
      set mp mp + 1
    ]
    set i i + 1
  ]



  ask swarm-agents [
    set color ((swarm * 10) + 5)
  ]
end


to setup-hierarchic
  let i 0
  while [i < layer-count] [
    ask n-of (item i layers-absolute-count) swarm-agents with [layer = -1] [
      set layer i
    ]
    set i i + 1
  ]

  setup-swarm-parameters

  ask swarm-agents [
    set color ((layer * 10) + 15)
  ]

end


to setup-swarm-parameters
   let i 0
   while [i < layer-count - 1] [
    ask swarm-agents with [layer = i] [
      set swarm-radius item (i + 1) layers-radius
      set swarm-algortihm item (i + 1) layers-swarm-algortihm
      set swarm-neighbourhood item (i + 1) layers-neighbourhood
      set swarm-move-weight item (i + 1) layers-move-weight
    ]
    set i i + 1
  ]

end




;Init

to initialize-agent
   set layer -1
   set swarm 0
   set mp-index 0
   setxyz  random-xcor random-ycor random-zcor
   set color orange
   set orientation (list dx dy dz)
end



to initialize-midpoints
  set index 0
  setxyz 0 0 0
  set color red
  set shape "x"
  set size 1
  set pitch 90
  set orientation (list dx dy dz)
end


;;GO--------------------------------------------------------------------------------------;;

to go

  ;Set the position of the selected Midpoint
  go-midpoints
  setup-swarm-parameters
  let mid-agent nobody
  let closest nobody
  ask swarm-agents [
    if-else sync-orientation [
      set orientation [orientation] of one-of midpoints
    ] [
      set orientation (list dx dy dz)
    ]


    set mid-agent get-mid-agent


    let neighbourhood 0
    let r 0
    let sa ""
    let mw 0
    if-else (layer = 0) [
      set neighbourhood item 0 layers-neighbourhood
      set r item 0 layers-radius
      set sa item 0 layers-swarm-algortihm
      set mw item 0 layers-move-weight
    ] [
      set neighbourhood [swarm-neighbourhood] of mid-agent
      set r [swarm-radius] of mid-agent
      set sa [swarm-algortihm] of mid-agent
      set mw [swarm-move-weight] of mid-agent

    ]

    set closest get-closest neighbourhood
    let vector [0 0 0]
    (ifelse
      sa = "Ring-of-Fliers" [
        set vector calc-ring-of-fliers mid-agent closest r mw
      ]
      sa = "Ball-of-Fliers" [
        set vector calc-ball-of-fliers mid-agent closest r
      ]
      sa = "Line-of-Fliers" [
        set vector calc-line-of-fliers mid-agent closest r
      ]
    )


    adapt-flight-vector vector
  ]

  tick
end



to-report get-mid-agent
  if  (layer = 0) [
      report one-of midpoints
    ]
  if-else (set-mode = "multiple-set") [
    report one-of swarm-agents with [mp-index = [swarm] of myself]
  ] [
    report min-one-of swarm-agents with [layer = ([layer] of myself - 1)] [distance myself]
  ]

end


to-report get-closest [neighbourhood]

  if (separation-mode = "local") [
    report min-one-of other swarm-agents with [layer = ([layer] of myself)] in-radius neighbourhood [distance myself]
  ]

  report min-one-of other swarm-agents in-radius neighbourhood [distance myself]

end


to go-midpoints
  ask midpoints with [index = curr-midpoint] [
    set xcor controller-x
    set ycor controller-y
    set zcor controller-z
    set heading controller-heading
    set pitch controller-pitch
    set orientation (list dx dy dz)
  ]
  tick
end

to go-layers
  set layer-midpoints-count [0 0 0 0 0]

end





to-report calc-ring-of-fliers [mid-agent closest r mw]
  let mid agent-to-vector mid-agent
  ;center urge
  let center-urge sub mid (agent-to-vector self)
  set center-urge scale (((magnitude center-urge) - ( r / (layer + 1) )) / (magnitude center-urge))  center-urge

  ;seperation urge
  let separation-urge [0 0 0]
  let seperation-urge-weight 0
  if (closest != nobody) [
    set separation-urge sub (agent-to-vector self) (agent-to-vector closest)
    set seperation-urge-weight ((1 / magnitude separation-urge) ^ 2)
  ]
  set separation-urge scale seperation-urge-weight separation-urge

  ;flat urge
  let flat-urge [orientation] of mid-agent
  let flat-urge-weight ((scalar-prod (sub (agent-to-vector self) mid) flat-urge) / (magnitude flat-urge)) * (-1)
  set flat-urge scale (flat-urge-weight) flat-urge

  ;move urge
  let direction [orientation] of mid-agent
  let agent agent-to-vector self
  let projection line-projection agent mid direction
  let line-urge sub projection agent
  let move-urge cross-prod orientation line-urge
  set move-urge scale mw move-urge


  ;add urges
  let vector [0 0 0]
  set vector add vector center-urge
  set vector add vector move-urge
  set vector add vector separation-urge
  set vector add vector flat-urge

  report vector

end


to-report calc-ball-of-fliers [mid-agent closest r]
  let mid agent-to-vector mid-agent
  ;center urge
  let center-urge sub mid (agent-to-vector self)
  set center-urge scale (((magnitude center-urge) - ( r / (layer + 1) )) / (magnitude center-urge))  center-urge

  ;seperation urge
  let separation-urge [0 0 0]
  let seperation-urge-weight 0
  if (closest != nobody) [
    set separation-urge sub (agent-to-vector self) (agent-to-vector closest)
    set seperation-urge-weight ((1 / magnitude separation-urge) ^ 2)
  ]
  set separation-urge scale seperation-urge-weight separation-urge

  ;add urges
  let vector [0 0 0]
  set vector add vector center-urge
  set vector add vector separation-urge

  report vector

end

to-report calc-line-of-fliers [mid-agent closest r]
  ;Projection onto line
  let mid agent-to-vector mid-agent
  let direction [orientation] of mid-agent
  let agent agent-to-vector self
  let projection line-projection agent mid direction
  let line-urge sub projection agent
  set line-urge scale 27 line-urge


  ;center urge
  let center-urge sub mid agent
  let weight magnitude sub agent mid - r
  let center-urge-weight ifelse-value (weight > 0) [weight][0]
  set center-urge scale center-urge-weight center-urge


  ;seperation urge
  let separation-urge [0 0 0]
  let seperation-urge-weight 0
  if (closest != nobody) [
    set separation-urge sub (agent-to-vector self) (agent-to-vector closest)
    set seperation-urge-weight ((1 / magnitude separation-urge) ^ 2)
  ]
  set separation-urge scale seperation-urge-weight separation-urge

  ;add urges
  let vector [0 0 0]
  set vector add vector line-urge
  set vector add vector separation-urge
  set vector add vector center-urge

  report vector
end

to-report line-projection [point origin direction]
  let a scalar-prod sub point origin direction
  let b scalar-prod direction direction
  report add scale (a / b) direction origin
end





to adapt-flight-vector [vector]
  if (magnitude vector > max-velocity) [
    set vector (scale max-velocity normalize vector)
  ]
  let nxcor xcor + (item 0 vector)
  let nycor ycor + (item 1 vector)
  let nzcor zcor + (item 2 vector)
  facexyz nxcor nycor nzcor
  fd magnitude vector
end


to remove-agent
  ask one-of swarm-agents [
    die
  ]
  ask swarm-agents with [get-mid-agent = nobody] [
    set swarm [swarm] of min-one-of other swarm-agents with [swarm != [swarm] of myself] [distance myself]
    set color ((swarm * 10) + 5)
  ]
end


to add-agent
  create-swarm-agents 1 [
    initialize-agent

    if-else (set-mode = "multiple-set") [
      let ref-agent min-one-of other swarm-agents [distance myself]
      set swarm [swarm] of ref-agent
      set layer [layer] of ref-agent
      ask swarm-agents [
        set color ((swarm * 10) + 5)
      ]
    ] [
      set layer [layer] of min-one-of other swarm-agents [distance myself]
    ]

  ]

end






;;--------------------------------------- gui functions --------------------------------------------


to select-midpoint
  ask one-of midpoints [
     set controller-x xcor
     set controller-y ycor
     set controller-z zcor
     set controller-heading heading
     set controller-pitch pitch
     set shape "arrow"
  ]

  ask midpoints [
    set shape "x"
  ]
end


to select-layer
  if layer-midpoints-count = 0 [
    set layer-midpoints-count [0 0 0 0 0]
  ]
  if layers-neighbourhood = 0 [
    set layers-neighbourhood [0 0 0 0 0]
  ]
  if layers-radius = 0 [
    set layers-radius [0 0 0 0 0]
  ]

  if layers-swarm-algortihm = 0 [
    set layers-swarm-algortihm ["Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  ]

  if layers-move-weight = 0 [
    set layers-move-weight [0 0 0 0 0]
  ]

  set agents-per-midpoint (item selected-layer layer-midpoints-count)

  set radius (item selected-layer layers-radius)

  set move-weight (item selected-layer layers-move-weight)

  set neighbourhood-radius (item selected-layer layers-neighbourhood)

  show item selected-layer layers-swarm-algortihm

  set swarm-algorithm (item selected-layer layers-swarm-algortihm)

end

to confirm-layer
  set layer-midpoints-count replace-item selected-layer layer-midpoints-count agents-per-midpoint
  set layers-radius replace-item selected-layer layers-radius radius
  set layers-neighbourhood replace-item selected-layer layers-neighbourhood neighbourhood-radius
  set layers-swarm-algortihm replace-item selected-layer layers-swarm-algortihm swarm-algorithm
  set layers-move-weight replace-item selected-layer layers-move-weight move-weight
end



to scenario-1
  ;Ring-of-Rings
  set layer-midpoints-count [8 8 0 0 0]
  set layers-radius [20 10 0 0 0]
  set layers-neighbourhood [20 5 0 0 0]
  set layers-swarm-algortihm ["Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0 0.020 0 0 0]
  set layer-count 2
  setup
end

to scenario-2
  ;Ring-of-Lines
  set layer-midpoints-count [8 8 0 0 0]
  set layers-radius [20 10 0 0 0]
  set layers-neighbourhood [20 5 0 0 0]
  set layers-swarm-algortihm ["Ring-of-Fliers" "Line-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0.004 0 0 0 0]
  set layer-count 2
  setup
end

to scenario-3
  ;Ring-of-Line-of-Rings
  set layer-midpoints-count [8 8 6 0 0]
  set layers-radius [20 10 7 0 0]
  set layers-neighbourhood [20 5 5 0 0]
  set layers-swarm-algortihm ["Ring-of-Fliers" "Line-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0.004 0 0 0 0]
  set layer-count 3
  setup
end

to scenario-4
  ;Ring-of-Balls
  set layer-midpoints-count [8 10 0 0 0]
  set layers-radius [20 8 0 0 0]
  set layers-neighbourhood [20 5 0 0 0]
  set layers-swarm-algortihm ["Ring-of-Fliers" "Ball-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0.004 0 0 0 0]
  set layer-count 2
  setup
end

to scenario-5
  ;Ball-of-Lines
  set layer-midpoints-count [8 10 0 0 0]
  set layers-radius [20 5 0 0 0]
  set layers-neighbourhood [20 5 0 0 0]
  set layers-swarm-algortihm ["Line-of-Fliers" "Ball-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers" "Ring-of-Fliers"]
  set layers-move-weight [0 0 0 0 0]
  set layer-count 2
  setup
end





to hide-midpoints
  ask midpoints [
    if-else (hidden?) [
      st
    ] [
      ht
    ]
  ]
end

;; --------------------------------------- vector functions ----------------------------------------


to-report agent-to-vector [agent]
  report (list [xcor] of agent [ycor] of agent [zcor] of agent)
end



to-report add [v1 v2]
  report (map + v1 v2)
end

to-report sub [v1 v2]
  report (map - v1 v2)
end

to-report scale [scalar vector]
  report map [n -> scalar * n] vector
end

to-report magnitude [vector]
  report sqrt sum map [n -> n * n] vector
end

to-report normalize [vector]
  let m magnitude vector
  if m = 0 [
    report vector
  ]
  report map [n -> n / m] vector
end

to-report scalar-prod [v1 v2]
  report sum (map * v1 v2)
end

to-report cross-prod [v1 v2]
  let r1 (item 1 v1)*(item 2 v2) - (item 2 v1) * (item 1 v2)
  let r2 (item 2 v1)*(item 0 v2) - (item 0 v1) * (item 2 v2)
  let r3 (item 0 v1)*(item 1 v2) - (item 1 v1) * (item 0 v2)

  report (list (r1) (r2) (r3))
end
